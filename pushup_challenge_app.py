# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15RNxdrDeFRzwVfWN8S7LbAbyIFuKs8x1
"""

import streamlit as st
import json
import os
from datetime import datetime, timedelta

DATA_FILE = 'pushup_data.json'

# Load data
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w') as f:
            json.dump({}, f)
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

# Save data
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# Update user
def update_user(username, pushups):
    today = datetime.today().strftime('%Y-%m-%d')
    data = load_data()

    if username not in data:
        data[username] = {
            "total_pushups": 0,
            "daily_log": {},
            "streak": 0,
            "last_entry": ""
        }

    user = data[username]
    last_entry = user.get("last_entry", "")
    yesterday = (datetime.today() - timedelta(days=1)).strftime('%Y-%m-%d')

    if last_entry == today:
        return False, "Already submitted today."

    if last_entry == yesterday:
        user["streak"] += 1
    else:
        user["streak"] = 1

    user["daily_log"][today] = pushups
    user["total_pushups"] += pushups
    user["last_entry"] = today

    data[username] = user
    save_data(data)
    return True, "Pushups submitted!"

# Leaderboard
def get_leaderboard():
    data = load_data()
    return sorted(data.items(), key=lambda x: x[1]['total_pushups'], reverse=True)

# Main UI
def main():
    st.title("90 Days Pushup Challenge")
    st.markdown("Track your daily pushups. Don't skip or your streak resets!")

    username = st.text_input("Enter your name (no spaces)", max_chars=20)
    pushups = st.number_input("Enter today's pushup count", min_value=1, step=1)

    if st.button("Submit"):
        if not username:
            st.warning("Please enter your name.")
        else:
            success, message = update_user(username.lower(), int(pushups))
            if success:
                st.success(message)
            else:
                st.error(message)

    st.subheader("Leaderboard")
    leaderboard = get_leaderboard()
    for idx, (name, info) in enumerate(leaderboard, 1):
        st.write(f"**{idx}. {name.capitalize()}** - {info['total_pushups']} pushups | Streak: {info['streak']}")

if __name__ == "__main__":
    main()